AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  kinesis_firehose

  Sample SAM Template for kinesis_firehose
Parameters:
  SizeInMB:
    Type: Number
    MinValue: 1
    MaxValue: 128
  IntervalSeconds:
    Type: Number
    MinValue: 60
    MaxValue: 900
  BucketName:
    Type: String
    Description: Enter the name for the destination bucket
  FirehoseDeliveryName:
    Type: String
    MinLength: 1
    MaxLength: 100
    Description: The name for the delivery Stream
  FirehoseDeliveryType:
    Type: String
    Default: DirectPut
    AllowedValues:
      - DirectPut
      - KinesisStreamAsSource
    Description: The Firehose Type of source
  ErrorOutput:
    Type: String
    Description: The output prefix for errors on execution.
  RetentionPeriod:
    Type: Number
    Default: 24
    MinValue: 24
    MaxValue: 240
  StreamName:
    Type: String
    MinLength: 1
    MaxLength: 100
    Description: Enter the name for the destination bucket
  Shards:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 8
    Description: The name for the delivery Stream
Resources:
  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: firehose_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource: 
                  - !Join ['',['arn:aws:s3:::', !Ref 'BucketName']]
                  - !Join ['',['arn:aws:s3:::', !Ref 'BucketName', '/*']]
              - Effect: Allow
                Action:
                  - kinesis:*
                Resource: "*"
  Firehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Ref FirehoseDeliveryName
      DeliveryStreamType: !Ref FirehoseDeliveryType
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt Stream.Arn
        RoleARN: !GetAtt FirehoseRole.Arn
      ExtendedS3DestinationConfiguration:
        BucketARN: 
          !Join
            - ':'
            - - 'arn:aws:s3::'
              - !Ref BucketName
        BufferingHints:
          SizeInMBs: !Ref SizeInMB
          IntervalInSeconds: !Ref IntervalSeconds
        CompressionFormat: UNCOMPRESSED
        ErrorOutputPrefix: !Ref ErrorOutput
        RoleARN: !GetAtt FirehoseRole.Arn
        DynamicPartitioningConfiguration:
          Enabled: false
        ProcessingConfiguration:
          Enabled: false
  KinesisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::177261743968:root
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                sts:ExternalId: 25c9857ccc0ef76292e0122fbb6e1fb07e0b2b4098c8a09f2b833628904e80d1bf0be601fa156301
  PolicyForStream:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: stream_policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kinesis:PutRecord
              - kinesis:PutRecords
            Resource: !GetAtt Stream.Arn
          - Effect: Allow
            Action:
              - kinesis:ListShards
              - kinesis:DescribeLimits
            Resource: "*"
      Roles:
        - !Ref KinesisRole

  Stream: 
    Type: AWS::Kinesis::Stream 
    Properties: 
        Name: !Ref StreamName 
        RetentionPeriodHours: !Ref RetentionPeriod 
        ShardCount: !Ref Shards
  # ScheduledRule: 
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     Description: "ScheduledRule"
  #     ScheduleExpression: "rate(10 minutes)"
  #     State: "ENABLED"
  #     Targets: 
  #       - 
  #         Arn: 
  #           Fn::GetAtt: 
  #             - "LambdaFunction"
  #             - "Arn"
  #         Id: "TargetFunctionV1"
  # PermissionForEventsToInvokeLambda: 
  #   Type: AWS::Lambda::Permission
  #   Properties: 
  #     FunctionName: !Ref "LambdaFunction"
  #     Action: "lambda:InvokeFunction"
  #     Principal: "events.amazonaws.com"
  #     SourceArn: 
  #       Fn::GetAtt: 
  #         - "ScheduledRule"
  #         - "Arn"
  # LambdaFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/app.function_handler
  #     Runtime: python3.7
  #     Policies:
  #       - Statement:
  #         - Sid: AllAccessToKinesisSNS
  #           Effect: Allow
  #           Action:
  #           - sns:*
  #           Resource: '*'
Outputs:
  StreamARN:
    Description: "Stream ARN"
    Value: !GetAtt Stream.Arn
  
